// index.js
import dotenv from "dotenv";
dotenv.config();

import { Client, GatewayIntentBits } from "discord.js";
import { startAdmin } from "./admin.js";
import { loadMessages, saveMessages } from "./utils.js";

// ‚úÖ Discord Client
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// ‚öì Bot ready
client.once("clientReady", () => {
  console.log(`‚öì Hafenmeister-Bot eingeloggt als ${client.user.tag}`);
});

// üì• Reagiere auf Nachrichten
client.on("messageCreate", (message) => {
  if (message.author.bot) return;

  const cmd = message.content.toLowerCase();

  // üëâ Command !hafen
  if (cmd === "!hafen") {
    const roll = Math.random() * 100;
    let antwort = "";

    if (roll < 80) {
      antwort = `Sehr geehrte/r <@${message.author.id}>, Ihre Waren kommen in der n√§chsten Woche im Hafen von Annesburg an. Bitte lassen Sie diese vom Postmeister abholen.  
Gezeichnet Hafenmeisterei Annesburg`;
    } else if (roll < 95) {
      antwort = `Sehr geehrte/r <@${message.author.id}>, Ihre Waren kommen in der n√§chsten Woche im Hafen von Annesburg an. Leider haben Ratten auf dem Schiff die H√§lfte der Ladung angeknabbert und die Seeleute mussten diese Kiste √ºber Bord werfen. Eine Erstattung wird es nicht geben, seien Sie froh, dass die Mehrarbeit nicht in Rechnung gestellt wurde.  
Gezeichnet Hafenmeister Annesburg`;
    } else {
      antwort = `Sehr geehrte/r <@${message.author.id}>, das Schiff mit Ihrer Bestellung ist untergegangen. Die Reederei ist leider nicht versichert, daher gibt es weder Waren noch Geld zur√ºck. Hier m√ºssen Sie eine neue Bestellung ausl√∂sen.  
Gezeichnet Hafenmeister Annesburg`;
    }

    message.reply(antwort);
  }

  // üëâ Speichere Erw√§hnungen
  if (message.mentions.has(client.user)) {
    const messages = loadMessages();

    // Falls die Nachricht schon gespeichert ist -> NICHT √ºberschreiben
    const exists = messages.find((m) => m.id === message.id);

    if (!exists) {
      messages.push({
        id: message.id,
        message: message.content,
        userId: message.author.id,
        timestamp: message.createdTimestamp,
        // Standard: +2 Tage ‚Äì aber nur beim ERSTEN Speichern
        scheduledTimestamp: Date.now() + 2 * 24 * 60 * 60 * 1000,
        sent: false,
      });

      saveMessages(messages);
      console.log(`üíæ Nachricht gespeichert: ${message.content}`);
    }
  }
});

// üîë Login
client.login(process.env.HAFEN_TOKEN);

// üöÄ Adminpanel starten
startAdmin();

// üïí DEBUG: Geplante Nachrichten pr√ºfen
setInterval(() => {
  const messages = loadMessages();
  const now = Date.now();
  const pending = messages.filter((m) => !m.sent && m.scheduledTimestamp > now);

  if (pending.length > 0) {
    const next = pending.sort(
      (a, b) => a.scheduledTimestamp - b.scheduledTimestamp
    )[0];
    if (next) {
      const diff = Math.max(
        0,
        Math.round((next.scheduledTimestamp - Date.now()) / 1000)
      );
      console.log(
        `[Scheduler] ‚è≥ N√§chste geplante Antwort: ${new Date(
          next.scheduledTimestamp
        ).toUTCString()} (${diff} Sekunden verbleibend)`
      );
    }
  }
}, 60 * 1000); // alle 60 Sekunden pr√ºfen
